// Lorenzo Murillo IV 
// CECS 378 Section 1 5739
// Due: 04/07/2023

#include <iostream>
#include <fstream>
#include <cstring>
#include <stdlib.h>
#include <vector>
#include <sstream>

using namespace std;
const int KEY_OFFSET = 518;
const int GEM_OFFSET = 519;
const int MAGIC_CARPET_OFFSET = 522;
const int SKULL_KEY_OFFSET = 523;
const int BLACK_BADGE_OFFSET = 536;
const int MAGIC_AXES_OFFSET = 576;
const int GOLD_OFFSET = 516;
string fileName;

//read a file in and return a vector to modify valules
vector<unsigned char> readFile() {

    //request input from a user for the file to edit
    cout << "Please enter a file name: " << endl;
    cin >> fileName;

    //ifstream inputFile;
    ifstream inputFile(fileName, ios::binary);

    // copies all data into buffer
    std::vector<unsigned char> newGameFile(std::istreambuf_iterator<char>(inputFile), {});

    //check that the file exists
    while (inputFile.fail()) {
        cout << "File Not Found, Sorry! \nPlease re-enter a file name: " << endl;
        cin >> fileName;
        inputFile.open(fileName.c_str());
    }

    //closing file
    inputFile.close();

    //successfully opened
    cout << "File Read Successfully!" << endl;

    return newGameFile;
}

void writeFile(vector<unsigned char> editedGameFile, string saveFileName) {
    string pathname(saveFileName);

    ofstream outputFile(saveFileName.c_str(), ios::out | ios::binary);
    outputFile.write((const char*)&editedGameFile[0], editedGameFile.size());
}

vector<unsigned char> decimalToHex(uint32_t value) {
    vector<unsigned char> hexVal;
    while (value) {
        int remainder = value % 16;
        if (remainder < 10) {
            hexVal.push_back(remainder + '0');
        }
        else {
            hexVal.push_back(remainder - 10 + 'A');
        }
        value = value / 16;
    }
    if (hexVal.size() < 4) {
        for (int i = 0; i < 4 - (hexVal.size() - i); i++) {
            hexVal.push_back('0');
        }
    }
    reverse(hexVal.begin(), hexVal.end());
    vector<unsigned char> hexLEndian;
    hexLEndian.push_back(hexVal.at(2));
    hexLEndian.push_back(hexVal.at(3));          // 00 64
    hexLEndian.push_back(hexVal.at(0));
    hexLEndian.push_back(hexVal.at(1)); 


    cout << "contents of HexLEndian: "; 
    for (int i = 0; i < hexLEndian.size(); i++) {
        cout << hexLEndian.at(i);
    }
    cout << "\n";
    cout << "contents of HexVal: ";
    for (int i = 0; i < hexVal.size(); i++) {
        cout << hexVal.at(i);
    }
    cout << "\n";

    return hexLEndian;
}

//A function that will edit the characters spec including: 
//STR, INT, DEX, HP, MAX HP, EXP, GOLD    
//the modifications are being adjusted by 32 for each character, 
//(1) offset for Main Character starts: 0x0000 000E (14) ends: 0x0000 0015 (24)
//(2) offset for Shamito        starts: 0x0000 002E (46) ends: 0x0000 0035 (56)
//(3) offset for Iolo           starts: 0x0000 004E (78) ends: 0x0000 0055 (88)
//(4) offset for Mariah         starts: 0x0000 006E (110) ends: 0x0000 0075 (120)
//(5) offset for Geoffrey       starts: 0x0000 008E (142) ends: 0x0000 0095 (152)
//(6) offset for Jaana          starts: 0x0000 00AE (174) ends: 0x0000 00B5 (184)
//(7) offset for Julia          starts: 0x0000 00CE (206) ends: 0x0000 00D5 (216)
//(8) offset for Dupree         starts: 0x0000 00E7 (238) ends: 0x0000 00EE (248)
//(9) offset for Katrina        starts: 0x0000 010E (270) ends: 0x0000 0115 (280)
//(10) offset for Sentri        starts: 0x0000 012E (302) ends: 0x0000 0135 (312)
//(11) offset for Gwenno        starts: 0x0000 014E (334) ends: 0x0000 0155 (344)
//(12) offset for Johne         starts: 0x0000 016E (366) ends: 0x0000 0175 (376)
//(13) offset for Gorn          starts: 0x0000 018E (398) ends: 0x0000 0195 (408)
//(14) offset for Maxwell       starts: 0x0000 01AE (430) ends: 0x0000 01B5 (440)
//(15) offset for Toshi         starts: 0x0000 01CE (462) ends: 0x0000 01D5 (472)
//(16) offset for Saduj         starts: 0x0000 01EE (494) ends: 0x0000 01F5 (504)
vector<unsigned char> editCharacterSpec(vector<unsigned char> modGameFile, int characterSelection, int characterStatSelection) {
    cout << "Please enter the value (in decimal) that you would like to modify the stat to: " << endl;
    int decimalVal;
    int offset;
    cin >> decimalVal;

    if (characterSelection == 1) {
        offset = 13 + characterStatSelection;
        cout << "offset value: " << offset << endl;
    }
    else {
        offset = 13 + (32 * (characterSelection - 1)) + characterStatSelection;
        cout << "offset value: " << offset << endl;
    }

    //handling each subset of cases
    if (characterStatSelection == 1 || characterStatSelection == 2 || characterStatSelection == 3) {
        //str, int, dex stat
        while (decimalVal < 0 || decimalVal > 99) {
            cout << "Out of range, please pick within the range of 0-99: ";
            cin >> decimalVal;
        }
        //convert decimal to hex value
        modGameFile.at(offset) = decimalVal;
    }
    else if (characterStatSelection == 4 || characterStatSelection == 5) {
        //hp, max hp stat
        //increment for magic offset and offset for MAX HP
        if (characterStatSelection == 4) {
            offset += 1;
        }
        else if (characterStatSelection == 5){
            offset += 2;
        }
        cout << "Offset: " << offset << endl;

        while (decimalVal < 0 || decimalVal > 999) {
            cout << "Out of range, please pick within the range of 0-999: ";
            cin >> decimalVal;
        }
        modGameFile.at(offset) = decimalVal;
        cout << modGameFile.at(offset) << endl;
        decimalVal = decimalVal - modGameFile.at(offset);
        decimalVal = decimalVal >> sizeof(long);
        cout << decimalVal << endl;
        modGameFile.at(offset + 1) = decimalVal / 16;
    }
    else {
        //exp
        //incrememnt for magic offset
        offset += 3;
        
        while (decimalVal < 0 || decimalVal > 9999) {
            cout << "Out of range, please pick within the range of 0-9999: ";
            cin >> decimalVal;
        }

        modGameFile.at(offset) = decimalVal;
        decimalVal = decimalVal - modGameFile.at(offset);
        decimalVal = decimalVal >> sizeof(long);
        modGameFile.at(offset + 1) = decimalVal / 16;
    }
    return modGameFile;
}

//A fucntion that will edit items including:
//Keys, Skull Keys, Gems, Black Badge, Magic Carpets, Magic Axes
//ask for the value they want to change, and give a range
//(1) Keys offset:      0x0000 0206 (518)
//(2) Gems offset:      0x0000 0207 (519)
//(4) Magic Carpets:    0x0000 020A (522)
//(5) Skull Key:        0x0000 020B (523)
//(6) Black Badge:      0x0000 0218 (536)
//(7) Magic Axes:       0x0000 0240 (576)
//(8) Gold:             0x0000 0204 - 0205
vector<unsigned char> editItems(vector<unsigned char> modGameFile, int itemSelection) {

    int itemValue = 0;
    if (itemSelection != 7) {
        cout << "Please enter a value from 0-100: " << endl;
        while (itemValue < 0 || itemValue > 100) {
            cout << "Invalid item value, please enter a value from 0-99" << endl;
            cin >> itemValue;
        }
    }
    else {
        cout << "Please enter a value from 0-9999: " << endl;
        while (itemValue < 0 || itemValue > 9999) {
            cout << "Invalid item value, please enter a value from 0-9999: " << endl;
            cin >> itemValue;
        }
    }

    cin >> itemValue;

    //vector<unsigned char> hexValue = decimalToHex(itemValue);
    switch (itemSelection) {
    case 1:
        modGameFile.at(KEY_OFFSET) = itemValue;
        break;
    case 2:
        modGameFile.at(SKULL_KEY_OFFSET) = itemValue;
        break;
    case 3:
        modGameFile.at(GEM_OFFSET) = itemValue;
        break;
    case 4:
        modGameFile.at(BLACK_BADGE_OFFSET) = itemValue;
        break;
    case 5:
        modGameFile.at(MAGIC_CARPET_OFFSET) = itemValue;
        break;
    case 6:
        modGameFile.at(MAGIC_AXES_OFFSET) = itemValue;
        break;
    case 7: 
        modGameFile.at(GOLD_OFFSET) = itemValue;
        itemValue = itemValue - modGameFile.at(GOLD_OFFSET);
        itemValue = itemValue >> sizeof(long);
        modGameFile.at(GOLD_OFFSET + 1) = itemValue / 16;
        break;
    }
    return modGameFile;
}

void userInterface() {
    int mainSelection;
    int characterSelection;
    int characterStatSelection;
    int itemSelection = -1;
    int quitEdit = -1;

    //initialize vector that will be modified
    vector<unsigned char> dataToModify = readFile();

    //loop until user quits
    while (quitEdit != 0) {

        cout << "Welcome to your Ultima 5 Character Editor!" << endl;
        cout << "Please select from an number from the menu: " << endl;
        cout << "1) Character Selection" << endl;
        cout << "2) Item Selection" << endl;
        cout << "0) Quit" << endl;

        cin >> mainSelection;
        //check for quit
        quitEdit = mainSelection;
        //when selection is invalid ask for value again

        while (mainSelection < 0 || mainSelection > 2) {
            cout << "Invalid selection, please enter 1 or 2." << endl;
            cin >> mainSelection;
        }

        if (mainSelection == 1) {
            cout << "Welcome to the character augmentation page, please select a character you would like to change:" << endl;
            //list character options
            cout << "1) You!\n2) Shamino\n3) Iolo\n4) Mariah\n5) Geoffrey\n6) Jaana\n7) Julia\n8) Dupre\n"
                "9) Katrina\n10) Sentri\n11) Gwenno\n12) Johne\n13) Gorn\n14) Maxwell\n15) Toshi\n16) Saduj\n0) Quit" << endl;
            cin >> characterSelection;
            //check for quit
            quitEdit = characterSelection;
            if (quitEdit != 0) {
                //list stat options
                cout << "Please select a spec that you would like to modify:" << endl;
                cout << "1) Strength(STR)\n2) Integrity(INT)\n3) Dexterity(DEX)\n4) HP\n5) Max HP\n6) EXP\n0)Quit" << endl;
                cout << "Note: STR/DEX/INT (0-99) | HP/MAX HP (0-999) | EXP/GOLD: (0-9999)" << endl;
                cin >> characterStatSelection;
                //check for quit
                quitEdit = characterStatSelection;
            }
            //call edit character and pass characterSelection and characterStatSelection
            dataToModify = editCharacterSpec(dataToModify, characterSelection, characterStatSelection);
        }
        else if (mainSelection == 2) {
            cout << "Welcome to the item autmentation page, please select an item you would like to change: " << endl;
            //list all the options
            cout << "1) Keys\n2) Skull Keys\n3) Gems\n4) Black Badge\n5) Magic Carpets\n6) Magic Axes!\n7) Gold\n8) Quit Item Change\n0) Quit" << endl;
            cin >> itemSelection;
            //check for quit
            quitEdit = itemSelection;
            if (itemSelection == 8) {
                mainSelection = 1;
            }
            else if (itemSelection == 0) {
                quitEdit = itemSelection;
            }
            else {
                dataToModify = editItems(dataToModify, itemSelection);
            }

        }
    }
    cout << "Saving file to ..." << fileName << endl;
    writeFile(dataToModify, fileName);
}


int main()
{
    userInterface();
}

